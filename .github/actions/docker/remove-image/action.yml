name: Remove old Docker images

description: Action for removing old Docker container package versions using GitHub API and `gh` CLI.

inputs:
  repo_name:
    description: 'Name of the repository/package containing Docker images'
    required: true
  github_token:
    description: 'GitHub token with read:packages permission'
    required: true

runs:
  using: "composite"
  steps:
    - name: Cleanup of old non-stable container packages
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        OWNER="sanger"
        PACKAGE="${{ inputs.repo_name }}"
        CUTOFF_DATE=$(date -d '4 months ago' --iso-8601=seconds)

        echo "Dry run: Listing container versions for $OWNER/$PACKAGE"
        echo "Cutoff date: $CUTOFF_DATE"

        # Authenticate gh CLI with token
        echo "${GH_TOKEN}" | gh auth login --with-token

        # List package versions from GitHub Container Registry for the org
        gh api -H "Accept: application/vnd.github+json" \
          "/orgs/$OWNER/packages/container/$PACKAGE/versions" \
          --paginate | jq -c '.[]' | while read -r version; do

          TAGS=$(echo "$version" | jq -r '.metadata.container.tags[]')
          UPDATED_AT=$(echo "$version" | jq -r '.updated_at')
          ID=$(echo "$version" | jq -r '.id')

          # Skip protected tags
          if echo "$TAGS" | grep -qE 'latest|develop'; then
            echo "Skipping tag(s): $TAGS"
            continue
          fi

          # Skip versions newer than cutoff
          if [[ "$UPDATED_AT" > "$CUTOFF_DATE" ]]; then
            echo "Skipping recent tag(s): $TAGS (updated $UPDATED_AT)"
            continue
          fi

          # Dry run: print what would be deleted
          echo "[DRY RUN] Would delete version $ID with tags: $TAGS (updated $UPDATED_AT)"
        done
