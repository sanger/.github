name: Remove old/unstable docker images

inputs:
  repo_name:
    description: 'Name of the repository/package containing Docker images'
    required: true

  github_token:
    description: 'GitHub App Token with permissions to delete packages'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
    - name: Authenticate with GitHub CLI
      shell: bash
      run: |
        echo "${{ inputs.github_token }}" | gh auth login --with-token

    - name: Collect Docker image versions to delete
      id: collect_versions
      shell: bash
      run: |
        REPO="sanger/${{ inputs.repo_name }}"
        ORG="sanger"
        PACKAGE_NAME="${{ inputs.repo_name }}"

        FOUR_MONTHS_AGO=$(date -d "4 months ago" +%Y-%m-%d)

        VERSIONS_JSON=$(gh api -H "Accept: application/vnd.github+json" \
          /orgs/${ORG}/packages/container/${PACKAGE_NAME}/versions)

        # Prepare a JSON array to collect version IDs to delete
        DELETE_IDS=()

        echo "$VERSIONS_JSON" | jq -c '.[]' | while read -r version; do
          TAG=$(echo "$version" | jq -r '.metadata.container.tags[0]')
          CREATED_AT=$(echo "$version" | jq -r '.created_at')

          if [[ "$TAG" == "latest" ]]; then
            continue
          fi

          if [[ "$TAG" != *develop* ]]; then
            continue
          fi

          if [[ "$CREATED_AT" < "${FOUR_MONTHS_AGO}T00:00:00Z" ]]; then
            VERSION_ID=$(echo "$version" | jq -r '.id')
            echo "Found to delete: $TAG ($VERSION_ID), created at $CREATED_AT"
            DELETE_IDS+=("$VERSION_ID")
          fi
        done

        # Join array elements into a space-separated string for output
        echo "::set-output name=version_ids::$(IFS=,; echo "${DELETE_IDS[*]}")"

    - name: Delete collected Docker image versions
      shell: bash
      run: |
        ORG="sanger"
        PACKAGE_NAME="${{ inputs.repo_name }}"
        VERSION_IDS="${{ steps.collect_versions.outputs.version_ids }}"

        if [[ -z "$VERSION_IDS" ]]; then
          echo "No versions found to delete."
          exit 0
        fi

        # Convert comma-separated string back to array
        IFS=',' read -r -a IDS_ARRAY <<< "$VERSION_IDS"

        for ID in "${IDS_ARRAY[@]}"; do
          echo "Deleting version ID: $ID"
          # gh api --method DELETE /orgs/${ORG}/packages/container/${PACKAGE_NAME}/versions/${ID}
          echo "Deleted version ID: $ID"
        done
